@page "/students"
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime


<div style="display: grid; grid-template-columns: 1fr 2fr; grid-gap: 2rem;">
    
    <div>
        <FluentCard>
            <h4>Add New Student</h4>
    
            <div style="display: grid; grid-template-columns: 1fr; grid-gap: 1rem; margin-bottom: 1rem;">
                <FluentTextField @bind-Value="newStudent.Name" Label="Student Name" />
        
                <FluentSelect TOption="Group"
                              Items="@allGroups"
                              OptionValue="@(g => g.GroupId.ToString())"
                              OptionText="@(g => g.Name)"
                              @bind-Value="newStudentGroupIdString"  
                              Label="Assign to Group (Optional)">
                    <InitialValue>Select a group...</InitialValue>
                </FluentSelect>
            </div>
            <FluentButton Appearance="Appearance.Accent" @onclick="AddStudentAsync">Add Student</FluentButton>
        </FluentCard>

        <FluentCard style="margin-top: 2rem;">
            <h4>Manage Groups</h4>
            <div style="display: flex; gap: 1rem; margin-bottom: 1.5rem;">
                <FluentTextField @bind-Value="newGroupName" Placeholder="New Group Name" Style="flex-grow: 1;" />
                <FluentButton Appearance="Appearance.Accent" @onclick="AddGroupAsync">Create Group</FluentButton>
            </div>

            <h5>Existing Groups</h5>
            @if (allGroups == null)
            {
                <p><em>Loading groups...</em></p>
            }
            else if (!allGroups.Any())
            {
                <p>No groups created yet.</p>
            }
            else
            {
                <FluentDataGrid TGridItem="Group" Items="@allGroups.AsQueryable()" GridTemplateColumns="1fr auto">
                    <TemplateColumn Title="Group Name">
                        @context.Name
                    </TemplateColumn>
                    <TemplateColumn Title="">
                        <FluentButton Appearance="Appearance.Stealth" @onclick="() => DeleteGroupAsync(context)">
                            Delete
                        </FluentButton>
                    </TemplateColumn>
                </FluentDataGrid>
            }
        </FluentCard>
    </div>

    <div>
        <FluentCard>
            <h3>Student List</h3>
            @if (students == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <FluentDataGrid TGridItem="Student" Items="@students.AsQueryable()" GridTemplateColumns="0.5fr 1.5fr 1fr 1fr 0.5fr">
                    <TemplateColumn Title="ID">
                        @context.StudentId
                    </TemplateColumn>
                    <TemplateColumn Title="Name">
                        @context.Name
                    </TemplateColumn>
                    <TemplateColumn Title="Group">
                        @(context.Group?.Name ?? "N/A") </TemplateColumn>
                    <TemplateColumn Title="Laps Run">
                        @context.LapsRun
                    </TemplateColumn>
                    <TemplateColumn Title="">
                        @* --- MODIFIED --- *@
                        <div style="display: flex; align-items: center; height: 100%; padding: 0;">
                            <FluentButton Appearance="Appearance.Stealth" @onclick="() => DeleteStudentAsync(context)">
                                Delete
                            </FluentButton>
                        </div>
                    </TemplateColumn>
                </FluentDataGrid>
            }
        </FluentCard>
    </div>
</div>


@code {
    private List<Student> students;
    private Student newStudent = new Student(); // <-- CHANGED from newStudentName
    
    private List<Group> allGroups; // <-- ADDED
    private string newGroupName; // <-- ADDED

    private string newStudentGroupIdString; // <-- ADD THIS

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
        await LoadGroups(); // <-- ADDED
    }

    private async Task LoadStudents()
    {
        // MODIFIED to Include Group data for the grid
        students = await DbContext.Students
            .Include(s => s.Group) // Eager load the related Group
            .OrderBy(s => s.Name)
            .ToListAsync();
    }

    // --- NEW METHOD ---
    private async Task LoadGroups()
    {
        allGroups = await DbContext.Groups.OrderBy(g => g.Name).ToListAsync();
    }

    // --- REPLACE THE AddStudentAsync METHOD WITH THIS ---
    private async Task AddStudentAsync()
    {
        if (newStudent != null && !string.IsNullOrWhiteSpace(newStudent.Name))
        {
            // Convert the string ID from the dropdown to an int?
            if (int.TryParse(newStudentGroupIdString, out int groupId) && groupId > 0)
            {
                newStudent.GroupId = groupId;
            }
            else
            {
                newStudent.GroupId = null; // No group selected
            }

            DbContext.Students.Add(newStudent);
            await DbContext.SaveChangesAsync();

            newStudent = new Student(); // Clear the form object
            newStudentGroupIdString = null; // <-- Also clear the dropdown string
            await LoadStudents();
        }
    }
    // --- END OF REPLACEMENT ---

    // --- NEW METHOD ---
    private async Task AddGroupAsync()
    {
        if (!string.IsNullOrWhiteSpace(newGroupName))
        {
            var newGroup = new Group { Name = newGroupName };
            DbContext.Groups.Add(newGroup);
            await DbContext.SaveChangesAsync();
            newGroupName = string.Empty;
            await LoadGroups(); // Refresh the groups list
        }
    }

    private async Task DeleteStudentAsync(Student studentToDelete)
    {
        DbContext.Students.Remove(studentToDelete);
        await DbContext.SaveChangesAsync();
        await LoadStudents();
    }

    // --- NEW METHOD ---
    private async Task DeleteGroupAsync(Group groupToDelete)
    {
        // First, we must update all students in this group to have no group.
        // This avoids a foreign key constraint error.
        var studentsInGroup = await DbContext.Students
            .Where(s => s.GroupId == groupToDelete.GroupId)
            .ToListAsync();
            
        foreach (var student in studentsInGroup)
        {
            student.GroupId = null; // Set their group to null
        }
        await DbContext.SaveChangesAsync(); // Save this change first

        // Now that no students are linked to this group, we can safely delete it.
        DbContext.Groups.Remove(groupToDelete);
        await DbContext.SaveChangesAsync();
        
        await LoadGroups();   // Refresh group list
        await LoadStudents(); // Refresh student list (to show "N/A" for the students we just updated)
    }
}