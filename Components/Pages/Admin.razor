@page "/admin"
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime

<h3>Admin Panel</h3>

<FluentCard style="margin-bottom: 2rem;">
    <h4>Create New Race</h4>

    <div style="display: grid; grid-template-columns: 1fr 1fr; grid-gap: 1rem;">
        <FluentTextField @bind-Value="newRace.Name" Label="Race Name" Placeholder="e.g., Race Across America" />
        <FluentNumberField @bind-Value="newRace.Year" Label="Year" Placeholder="e.g., 2026" />
        <FluentNumberField @bind-Value="newRace.Semester" Label="Semester" Placeholder="e.g., 1 for Fall, 2 for Spring" />
        
        <FluentSelect TOption="Race"
                      Items="@races"
                      OptionValue="@(r => r.RaceId.ToString())"
                      OptionText="@(r => $"{r.Name} ({r.Year})")"
                      @bind-Value="raceToCopyIdString"
                      Label="Copy Checkpoints from (Optional)"
                      PopupAnchorId="main-content-area">
            
            <FluentOption Value="@string.Empty">-- None --</FluentOption> 
            
            <InitialValue>Select a race to copy...</InitialValue>
            
        </FluentSelect>
    </div>

    <FluentButton Appearance="Appearance.Accent" @onclick="AddRaceAsync" style="margin-top: 1rem;">
        Create Race
    </FluentButton>
</FluentCard>


<FluentCard>
    <h4>Existing Races</h4>

    @if (races == null)
    {
        <p><em>Loading races...</em></p>
    }
    else
    {
        <FluentDataGrid TGridItem="Race" Items="@races.AsQueryable()" GridTemplateColumns="1fr 1fr 1fr 100px 100px">
            <TemplateColumn Title="Race Name">
                @context.Name
            </TemplateColumn>
            <TemplateColumn Title="Year">
                @context.Year
            </TemplateColumn>
            <TemplateColumn Title="Semester">
                @context.Semester
            </TemplateColumn>
            <TemplateColumn Title="">
                <FluentAnchor Href="@($"admin/race/{context.RaceId}")" Appearance="Appearance.Hypertext">
                    Manage
                </FluentAnchor>
            </TemplateColumn>
            <TemplateColumn Title="">
                <FluentButton Appearance="Appearance.Stealth" @onclick="() => DeleteRaceAsync(context)">
                    Delete
                </FluentButton>
            </TemplateColumn>
        </FluentDataGrid>
    }
</FluentCard>


@code {
    private List<Race> races;
    private Race newRace = new Race();
    // Initialize to null so the "Select..." option appears initially
    private string raceToCopyIdString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadRaces();
    }

    private async Task LoadRaces()
    {
        // Load races, ordered for the dropdown
        races = await DbContext.Races.OrderByDescending(r => r.Year).ThenBy(r => r.Name).ToListAsync();
        Console.WriteLine($"Loaded {races?.Count ?? 0} races for dropdown."); // Debug output
    }

    private async Task AddRaceAsync()
    {
        // --- TEMPORARY DEBUGGING ---
        Console.WriteLine($"--- Starting AddRaceAsync ---");
        Console.WriteLine($"New Race Name: {newRace?.Name}, Year: {newRace?.Year}, Semester: {newRace?.Semester}");
        Console.WriteLine($"Race ID String to Copy From: '{raceToCopyIdString}'");
        // --- END DEBUGGING ---

        if (newRace != null && !string.IsNullOrWhiteSpace(newRace.Name) && newRace.Year > 2000)
        {
            int? raceToCopyId = null;
            if (int.TryParse(raceToCopyIdString, out int id) && id > 0)
            {
                raceToCopyId = id;
                Console.WriteLine($"Parsed Race ID to Copy From: {raceToCopyId.Value}"); // Debug output
            }
            else
            {
                Console.WriteLine("No valid Race ID selected to copy from."); // Debug output
            }

            if (raceToCopyId.HasValue)
            {
                Console.WriteLine($"Fetching checkpoints for Race ID: {raceToCopyId.Value}"); // Debug output
                var checkpointsToCopy = await DbContext.Checkpoints
                    .Where(c => c.RaceId == raceToCopyId.Value)
                    .AsNoTracking()
                    .ToListAsync();

                Console.WriteLine($"Found {checkpointsToCopy.Count} checkpoints to copy."); // Debug output

                if (checkpointsToCopy.Any())
                {
                    foreach (var cp in checkpointsToCopy)
                    {
                        // Ensure the Checkpoints collection is initialized
                        // (The constructor in Race.cs should already do this, but just in case)
                        if (newRace.Checkpoints == null)
                        {
                            newRace.Checkpoints = new List<Checkpoint>();
                        }

                        newRace.Checkpoints.Add(new Checkpoint
                        {
                            City = cp.City,
                            State = cp.State,
                            CumulativeMiles = cp.CumulativeMiles,
                            X = cp.X,
                            Y = cp.Y
                        });
                    }
                    Console.WriteLine($"Total checkpoints added to newRace object: {newRace.Checkpoints.Count}"); // Debug output
                }
            }
            else
            {
                Console.WriteLine("Not copying any checkpoints."); // Debug output
            }

            try
            {
                Console.WriteLine("Adding new race to DbContext..."); // Debug output
                DbContext.Races.Add(newRace);

                Console.WriteLine("Calling SaveChangesAsync..."); // Debug output
                await DbContext.SaveChangesAsync();
                Console.WriteLine($"SaveChanges successful. New Race ID: {newRace.RaceId}"); // Debug output
            }
            catch (Exception ex)
            {
                Console.WriteLine($"!!! Error saving changes: {ex.Message}"); // Debug output for errors
                                                                              // Optionally log the full exception: Console.WriteLine(ex.ToString());
                                                                              // Optionally, add user feedback here that saving failed
                return; // Stop processing if save failed
            }

            newRace = new Race(); // Reset for next time
            raceToCopyIdString = string.Empty; // Reset dropdown
            Console.WriteLine("Form cleared."); // Debug output
            await LoadRaces(); // Refresh list on page
        }
        else
        {
            Console.WriteLine("Validation failed (Name or Year invalid). Race not added."); // Debug output
        }
        Console.WriteLine($"--- Finished AddRaceAsync ---"); // Debug output
    }

    private async Task DeleteRaceAsync(Race raceToDelete)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the race '{raceToDelete.Name}'? This will also delete all its checkpoints.");
        if (confirmed)
        {
            var race = await DbContext.Races.FindAsync(raceToDelete.RaceId);
            if (race != null)
            {
                DbContext.Races.Remove(race);
                await DbContext.SaveChangesAsync();
                Console.WriteLine($"Deleted Race ID: {raceToDelete.RaceId}"); // Debug output
            }
            await LoadRaces();
        }
    }
}