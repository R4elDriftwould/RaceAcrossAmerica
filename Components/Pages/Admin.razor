@page "/admin"
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime

<h3>Admin Panel</h3>

<FluentCard style="margin-bottom: 2rem;">
    <h4>Create New Race</h4>

    <div style="display: grid; grid-template-columns: 1fr 1fr; grid-gap: 1rem;">
        <FluentTextField @bind-Value="newRace.Name" Label="Race Name" Placeholder="e.g., Race Across America" />
        <FluentNumberField @bind-Value="newRace.Year" Label="Year" Placeholder="e.g., 2026" />
        <FluentNumberField @bind-Value="newRace.Semester" Label="Semester" Placeholder="e.g., 1 for Fall, 2 for Spring" />
        
        <div>
            <label for="copyRaceSelect" class="form-label">Copy Checkpoints from (Optional)</label>
            <select id="copyRaceSelect" class="form-select" @onchange="HandleRaceSelectionChange">
                <option value="">-- Select a race to copy --</option> @if (races != null)
                {
                    @foreach (var race in races)
                    {
                        // Use selectedRaceIdString to control which option is selected
                        <option value="@race.RaceId" selected="@(race.RaceId.ToString() == selectedRaceIdString)">
                            @($"{race.Name} ({race.Year})")
                        </option>
                    }
                }
            </select>
        </div>
    </div>

    <FluentButton Appearance="Appearance.Accent" @onclick="AddRaceAsync" style="margin-top: 1rem;">
        Create Race
    </FluentButton>
</FluentCard>


<FluentCard>
    <h4>Existing Races</h4>

    @if (races == null)
    {
        <p><em>Loading races...</em></p>
    }
    else
    {
        <FluentDataGrid TGridItem="Race" Items="@races.AsQueryable()" GridTemplateColumns="1fr 1fr 1fr 100px 100px">
            <TemplateColumn Title="Race Name">
                @context.Name
            </TemplateColumn>
            <TemplateColumn Title="Year">
                @context.Year
            </TemplateColumn>
            <TemplateColumn Title="Semester">
                @context.Semester
            </TemplateColumn>
            <TemplateColumn Title="">
                @* --- MODIFIED --- *@
                <div style="display: flex; align-items: center; height: 100%; padding: 0;">
                    <FluentAnchor Href="@($"admin/race/{context.RaceId}")" Appearance="Appearance.Hypertext">
                        Manage
                    </FluentAnchor>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="">
                @* --- MODIFIED --- *@
                <div style="display: flex; align-items: center; height: 100%; padding: 0;">
                    <FluentButton Appearance="Appearance.Stealth" @onclick="() => DeleteRaceAsync(context)">
                        Delete
                    </FluentButton>
                </div>
            </TemplateColumn>
        </FluentDataGrid>
    }
</FluentCard>


@code {
    private List<Race>? races; // Keep nullable for initial check
    private Race newRace = new Race();
    // Revert to nullable int for the ID
    private int? raceToCopyId = null;

    // Variable to hold the string value from the standard HTML select
    private string selectedRaceIdString = string.Empty; // Use string.Empty for default "Select..." option

    protected override async Task OnInitializedAsync()
    {
        await LoadRaces();
    }

    private async Task LoadRaces()
    {
        // Just load the races directly, no placeholder needed now
        races = await DbContext.Races
            .OrderByDescending(r => r.Year)
            .ThenBy(r => r.Name)
            .ToListAsync();
        Console.WriteLine($"Loaded {races?.Count ?? 0} races for dropdown.");
    }

    // Method to handle changes from the standard HTML select
    private void HandleRaceSelectionChange(ChangeEventArgs e)
    {
        selectedRaceIdString = e.Value?.ToString() ?? string.Empty;
        if (int.TryParse(selectedRaceIdString, out int id) && id > 0)
        {
            raceToCopyId = id;
        }
        else
        {
            raceToCopyId = null; // Set back to null if "Select..." is chosen
        }
        Console.WriteLine($"Selection changed. raceToCopyId is now: {raceToCopyId}");
    }

    private async Task AddRaceAsync()
    {
        Console.WriteLine($"--- Starting AddRaceAsync ---");
        Console.WriteLine($"New Race Name: {newRace?.Name}, Year: {newRace?.Year}, Semester: {newRace?.Semester}");
        Console.WriteLine($"Race ID To Copy From (int?): {raceToCopyId}"); // Log the int? value

        if (newRace != null && !string.IsNullOrWhiteSpace(newRace.Name) && newRace.Year > 2000)
        {
            // Directly use raceToCopyId.HasValue
            if (raceToCopyId.HasValue)
            {
                Console.WriteLine($"Fetching checkpoints for Race ID: {raceToCopyId.Value}");
                var checkpointsToCopy = await DbContext.Checkpoints
                    .Where(c => c.RaceId == raceToCopyId.Value)
                    .AsNoTracking()
                    .ToListAsync();
                Console.WriteLine($"Found {checkpointsToCopy.Count} checkpoints to copy.");

                if (checkpointsToCopy.Any())
                {
                    if (newRace.Checkpoints == null)
                    {
                        newRace.Checkpoints = new List<Checkpoint>();
                    }

                    foreach (var cp in checkpointsToCopy)
                    {
                        newRace.Checkpoints.Add(new Checkpoint
                        {
                            City = cp.City,
                            State = cp.State,
                            CumulativeMiles = cp.CumulativeMiles,
                            X = cp.X,
                            Y = cp.Y
                        });
                        Console.WriteLine($" -> Added copy of checkpoint: {cp.City}");
                    }
                    Console.WriteLine($"Total checkpoints added to newRace object before save: {newRace.Checkpoints.Count}");
                }
            }
            else
            {
                Console.WriteLine("Not copying any checkpoints.");
            }

            try
            {
                Console.WriteLine($"Adding new race '{newRace.Name}' to DbContext...");
                DbContext.Races.Add(newRace);

                Console.WriteLine("Calling SaveChangesAsync...");
                await DbContext.SaveChangesAsync();
                Console.WriteLine($"SaveChanges successful. New Race ID: {newRace.RaceId}, Checkpoints attached: {newRace.Checkpoints?.Count ?? 0}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"!!! Error saving changes: {ex.Message}");
                return;
            }

            newRace = new Race();
            // Reset the bound string and the int? value
            selectedRaceIdString = string.Empty;
            raceToCopyId = null;
            Console.WriteLine("Form cleared, resetting dropdown.");
            await LoadRaces();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Validation failed (Name or Year invalid). Race not added.");
        }
        Console.WriteLine($"--- Finished AddRaceAsync ---");
    }

    // --- DeleteRaceAsync (no changes needed) ---
    private async Task DeleteRaceAsync(Race raceToDelete)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the race '{raceToDelete.Name}'? This will also delete all its checkpoints.");
        if (confirmed)
        {
            var race = await DbContext.Races.Include(r => r.Checkpoints).FirstOrDefaultAsync(r => r.RaceId == raceToDelete.RaceId);
            if (race != null)
            {
                DbContext.Races.Remove(race);
                await DbContext.SaveChangesAsync();
                Console.WriteLine($"Deleted Race ID: {raceToDelete.RaceId}");
            }
            await LoadRaces();
            StateHasChanged();
        }
    }
}

